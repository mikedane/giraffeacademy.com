<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MongoDB on Mike Dane</title>
    <link>https://www.mikedane.com/databases/mongodb/</link>
    <description>Recent content in MongoDB on Mike Dane</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Dec 2017 11:54:12 -0500</lastBuildDate><atom:link href="https://www.mikedane.com/databases/mongodb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mac Installation</title>
      <link>https://www.mikedane.com/databases/mongodb/mac-installation/</link>
      <pubDate>Fri, 22 Dec 2017 11:54:13 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/mongodb/mac-installation/</guid>
      <description>Instructions Download using brew Execute the following commands brew update brew install mongodb Download the Binary Download MongoDB Community Server Binary https://www.mongodb.com/download-center?jmp=nav#community Extract the files (double click) into the downloads folder I just put them at the root directory of the home folder Configure command line to recognize &amp;lsquo;mongod&amp;rsquo; command echo &amp;rsquo;export PATH=/Users/Mike/mongodb-osx-x86_64-3.6.0/bin:$PATH&amp;rsquo; &amp;raquo; ~/.bashrc Download Compass https://www.mongodb.com/download-center#compass Configure Create &amp;lsquo;/data/db&amp;rsquo; directory Create this at root directory of hard-drive Ensure that current user has read/write permissions Or customize location using: mongod &amp;ndash;dbpath I put this at the root directory of my home folder Start MongoDB server mongod Connect to MongoDB server from client &amp;ndash; (in new terminal window) mongo &amp;ndash;host localhost:27017 &amp;ndash; (in compass) use the default settings </description>
    </item>
    
    <item>
      <title>Windows Installation</title>
      <link>https://www.mikedane.com/databases/mongodb/windows-installation/</link>
      <pubDate>Fri, 22 Dec 2017 11:54:13 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/mongodb/windows-installation/</guid>
      <description>Instructions Download the Windows installer https://www.mongodb.com/download-center?jmp=nav#community Step through installer (be sure to download compass) Add mongod.exe to path Create &amp;lsquo;/data/db&amp;rsquo; directory Create this at root directory of hard-drive Ensure that current user has read/write permissions Or customize location using: mongod &amp;ndash;dbpath I put this at the root directory of my home folder Start MongoDB server mongod Connect to MongoDB server from client &amp;ndash; (in new terminal window) mongo &amp;ndash;host localhost:27017 &amp;ndash; (in compass) use the default settings </description>
    </item>
    
    <item>
      <title>Creating Collections</title>
      <link>https://www.mikedane.com/databases/mongodb/creating-collections/</link>
      <pubDate>Fri, 22 Dec 2017 11:54:13 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/mongodb/creating-collections/</guid>
      <description>Code Copy// if you insert into a non-existant collection it will be created automatically db.createCollection(&amp;#34;students&amp;#34;) // https://docs.mongodb.com/manual/reference/method/db.createCollection/index.html db.createCollection(&amp;#34;students&amp;#34;, {options}) db.dropCollection(&amp;#34;students&amp;#34;) show collections </description>
    </item>
    
    <item>
      <title>Inserting</title>
      <link>https://www.mikedane.com/databases/mongodb/inserting/</link>
      <pubDate>Fri, 22 Dec 2017 11:54:13 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/mongodb/inserting/</guid>
      <description>Code Copy// Data Types { string: &amp;#34;String of text&amp;#34;, int: 405, double: 3.565, boolean: true, // false array: [1, 2, 3], object: {attr1: &amp;#34;attr1&amp;#34;, attr2: &amp;#34;attr2&amp;#34;}, date: new Date(&amp;#34;&amp;lt;YYYY-mm-dd&amp;gt;&amp;#34;), object_id: &amp;lt;ObjectId&amp;gt;, no_value: null } /* Additional Data Types --------------------- Timestamp Binary data Regular expressions JS Code */ // Inserting db.students.insertOne({name: &amp;#34;Jack&amp;#34;, major: &amp;#34;Biology&amp;#34;, gpa: 3.5}) db.students.insertOne({name: &amp;#34;Claire&amp;#34;, major: &amp;#34;Marketing&amp;#34;, gpa: 3.7, awards: [&amp;#34;Valedictorian&amp;#34;, &amp;#34;Summa Cum Laude&amp;#34;]} ) db.students.insertOne({name: &amp;#34;Evan&amp;#34;, major: &amp;#34;Astronomy&amp;#34;, gpa: 3.</description>
    </item>
    
    <item>
      <title>Finding Documents</title>
      <link>https://www.mikedane.com/databases/mongodb/finding-documents/</link>
      <pubDate>Fri, 22 Dec 2017 11:54:13 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/mongodb/finding-documents/</guid>
      <description>Code Copy// Find all students db.students.find( {} ) // Find the first 3 students db.stuents.find( {} ).limit(3) // Find all students and sort by name in ascending order db.students.find( {} ).sort( {name: 1} ) // Find all students and sort by name in ascending order db.students.find( {} ).sort( {gpa: -1, name: 1} ) // Find all biology majors db.students.find( {major: &amp;#34;Biology&amp;#34;} ) // Find all student&amp;#39;s with a phone number 333-3333 db.</description>
    </item>
    
    <item>
      <title>Updating &amp; Deleting Documents</title>
      <link>https://www.mikedane.com/databases/mongodb/updating-deleting-documents/</link>
      <pubDate>Fri, 22 Dec 2017 11:54:13 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/mongodb/updating-deleting-documents/</guid>
      <description>Code Copy// same filters as inserting db.stuents.updateOne(&amp;lt;filter&amp;gt;, &amp;lt;update&amp;gt;, &amp;lt;options&amp;gt;) // Do this twice so we can change it back with updateMany db.students.updateOne( {major: &amp;#34;Biology&amp;#34;}, { $set: {major: &amp;#34;Bio&amp;#34;} } ) db.students.updateMany( {major: &amp;#34;Bio&amp;#34;}, { $set: {major: &amp;#34;Biology&amp;#34;} } ) // replaceMany() db.students.replaceOne( {major: &amp;#34;Bio&amp;#34;}, {name: &amp;#34;new name&amp;#34;, major: &amp;#34;new major&amp;#34;, gpa: 4.0} ) // Delete all documents db.students.deleteMany({}) db.students.deleteOne({major: &amp;#34;Biology&amp;#34;}) db.students.deleteMany({gpa: {$gte: 3.5}}) </description>
    </item>
    
    <item>
      <title>Bulk Actions</title>
      <link>https://www.mikedane.com/databases/mongodb/bulk-actions/</link>
      <pubDate>Fri, 22 Dec 2017 11:54:13 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/mongodb/bulk-actions/</guid>
      <description>Code Copydb.students.bulkWrite( [ { insertOne : { &amp;#34;document&amp;#34; : { name: &amp;#34;Andrew&amp;#34;, major: &amp;#34;Architecture&amp;#34;, gpa: 3.2 } } }, { insertOne : { &amp;#34;document&amp;#34; : { name: &amp;#34;Terry&amp;#34;, major: &amp;#34;Math&amp;#34;, gpa: 3.8 } } }, { updateOne : { filter : { name : &amp;#34;Terry&amp;#34; }, update : { $set : { gpa : 4.0 } } } }, { deleteOne : { filter : { name : &amp;#34;Kate&amp;#34;} } }, { replaceOne : { filter : { name : &amp;#34;Claire&amp;#34; }, replacement : { name: &amp;#34;Genny&amp;#34;, major: &amp;#34;Counsling&amp;#34;, gpa: 2.</description>
    </item>
    
    <item>
      <title>Text Indexing</title>
      <link>https://www.mikedane.com/databases/mongodb/text-indexing/</link>
      <pubDate>Fri, 22 Dec 2017 11:54:13 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/mongodb/text-indexing/</guid>
      <description>Code Copydb.stores.insertMany( [ { _id: 1, name: &amp;#34;Java Hut&amp;#34;, description: &amp;#34;Coffee and cakes&amp;#34; }, { _id: 2, name: &amp;#34;Burger Buns&amp;#34;, description: &amp;#34;Gourmet hamburgers&amp;#34; }, { _id: 3, name: &amp;#34;Coffee Shop&amp;#34;, description: &amp;#34;Just coffee&amp;#34; }, { _id: 4, name: &amp;#34;Clothes Clothes Clothes&amp;#34;, description: &amp;#34;Discount clothing&amp;#34; }, { _id: 5, name: &amp;#34;Java Shopping&amp;#34;, description: &amp;#34;Indonesian goods&amp;#34; } ] ) db.stores.createIndex( { name: &amp;#34;text&amp;#34;, description: &amp;#34;text&amp;#34; } ) db.stores.find({ $text: {$search: &amp;#34;Coffee&amp;#34; } }) db.</description>
    </item>
    
    <item>
      <title>Aggregation</title>
      <link>https://www.mikedane.com/databases/mongodb/aggregation/</link>
      <pubDate>Fri, 22 Dec 2017 11:54:13 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/mongodb/aggregation/</guid>
      <description>Code Copydb.purchase_orders.insertMany( [ {product: &amp;#34;toothbrush&amp;#34;, total: 4.75, customer: &amp;#34;Mike&amp;#34;}, {product: &amp;#34;guitar&amp;#34;, total: 199.99, customer: &amp;#34;Tom&amp;#34;}, {product: &amp;#34;milk&amp;#34;, total: 11.33, customer: &amp;#34;Mike&amp;#34;}, {product: &amp;#34;pizza&amp;#34;, total: 8.50, customer: &amp;#34;Karen&amp;#34;}, {product: &amp;#34;toothbrush&amp;#34;, total: 4.75, customer: &amp;#34;Karen&amp;#34;}, {product: &amp;#34;pizza&amp;#34;, total: 4.75, customer: &amp;#34;Dave&amp;#34;} {product: &amp;#34;toothbrush&amp;#34;, total: 4.75, customer: &amp;#34;Mike&amp;#34;}, ] ) // find out how many toothbrushes were sold db.purchase_orders.count({product: &amp;#34;toothbrush&amp;#34;}) // Find list of all products sold db.purchase_orders.distinct(&amp;#34;product&amp;#34;) // Find the total amount of money spent by each customer db.</description>
    </item>
    
  </channel>
</rss>
