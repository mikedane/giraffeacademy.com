<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQL on Mike Dane</title>
    <link>https://www.mikedane.com/databases/sql/</link>
    <description>Recent content in SQL on Mike Dane</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Dec 2017 11:48:55 -0500</lastBuildDate><atom:link href="https://www.mikedane.com/databases/sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tables &amp; Keys</title>
      <link>https://www.mikedane.com/databases/sql/tables-keys/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:55 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/tables-keys/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Sql Basics</title>
      <link>https://www.mikedane.com/databases/sql/sql-basics/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:55 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/sql-basics/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mysql Windows Installation</title>
      <link>https://www.mikedane.com/databases/sql/mysql-windows-installation/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:55 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/mysql-windows-installation/</guid>
      <description>Instructions Download mySQL Community Server - https://dev.mysql.com/downloads/mysql/
Be sure to go to the windows installer page Run installer
Choose &amp;lsquo;Custom Installation&amp;rsquo; and install the server and the shell
Create a root password
Go into start menu, open MySQL Shell and login
Create a database CopyCREATE DATABASE giraffe_db;
Done!</description>
    </item>
    
    <item>
      <title>Mysql Mac Installation</title>
      <link>https://www.mikedane.com/databases/sql/mysql-mac-installation/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:55 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/mysql-mac-installation/</guid>
      <description>Instructions Download mySQL Community Server - https://dev.mysql.com/downloads/mysql/ Run installer Write down temporary password Open &amp;lsquo;MySQL&amp;rsquo; in System Preferences and start the server Configure command line to recognize &amp;lsquo;mysql&amp;rsquo; command echo &amp;rsquo;export PATH=/usr/local/mysql/bin:$PATH&amp;rsquo; &amp;raquo; ~/.bash_profile . ~/.bash_profile mysql -u root -p Enter temporary password from step 3 when prompted Change temporary password CopyALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;new_password&amp;#39;; Test to make sure new password worked exit mysql -u root -p Enter new password when prompted Create a database Copy CREATE DATABASE giraffe_db; Done!</description>
    </item>
    
    <item>
      <title>Creating Tables</title>
      <link>https://www.mikedane.com/databases/sql/creating-tables/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:55 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/creating-tables/</guid>
      <description>Code CopyINT -- Whole Numbers DECIMAL(M,N) -- Decimal Numbers - Exact Value VARCHAR(l) -- String of text of length l BLOB -- Binary Large Object, Stores large data DATE -- &amp;#39;YYYY-MM-DD&amp;#39; TIMESTAMP -- &amp;#39;YYYY-MM-DD HH:MM:SS&amp;#39; - used for recording events -- Creating tables CREATE TABLE student ( student_id INT PRIMARY KEY, name VARCHAR(40), major VARCHAR(40) -- PRIMARY KEY(student_id) ); DESCRIBE student; DROP TABLE student; ALTER TABLE student ADD gpa DECIMAL; ALTER TABLE student DROP COLUMN gpa; </description>
    </item>
    
    <item>
      <title>Inserting Data</title>
      <link>https://www.mikedane.com/databases/sql/inserting-data/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:55 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/inserting-data/</guid>
      <description>Code CopyINSERT INTO student VALUES(1, &amp;#39;Jack&amp;#39;, &amp;#39;Biology&amp;#39;); INSERT INTO student VALUES(2, &amp;#39;Kate&amp;#39;, &amp;#39;Sociology&amp;#39;); INSERT INTO student(student_id, name) VALUES(3, &amp;#39;Claire&amp;#39;); INSERT INTO student VALUES(4, &amp;#39;Jack&amp;#39;, &amp;#39;Biology&amp;#39;); INSERT INTO student VALUES(5, &amp;#39;Mike&amp;#39;, &amp;#39;Computer Science&amp;#39;); </description>
    </item>
    
    <item>
      <title>Constraints</title>
      <link>https://www.mikedane.com/databases/sql/constraints/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:55 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/constraints/</guid>
      <description>Code CopyCREATE TABLE student ( student_id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(40) NOT NULL, -- name VARCHAR(40) UNIQUE, major VARCHAR(40) DEFAULT &amp;#39;undecided&amp;#39;, ); </description>
    </item>
    
    <item>
      <title>Update &amp; Delete</title>
      <link>https://www.mikedane.com/databases/sql/update-delete/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:55 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/update-delete/</guid>
      <description>Code CopyDELETE FROM student; DELETE FROM student WHERE student_id = 4; DELETE FROM student WHERE major = &amp;#39;Sociology&amp;#39; AND name = &amp;#39;Kate&amp;#39;; UPDATE student SET major = &amp;#39;Undecided&amp;#39;; UPDATE student SET name = &amp;#39;Johnny&amp;#39; WHERE student_id = 4; UPDATE student SET major = &amp;#39;Biological Sciences&amp;#39; WHERE major = &amp;#39;Biology&amp;#39;; UPDATE student SET major = &amp;#39;Biosociology&amp;#39; WHERE major = &amp;#39;Biology&amp;#39; OR major = &amp;#39;sociology&amp;#39; UPDATE student SET major = &amp;#39;Undecided&amp;#39;, name = &amp;#39;Tom&amp;#39; WHERE student_id = 4; </description>
    </item>
    
    <item>
      <title>Basic Queries</title>
      <link>https://www.mikedane.com/databases/sql/basic-queries/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:56 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/basic-queries/</guid>
      <description>Code CopySELECT * FROM student; SELECT student.name, student.major FROM student; SELECT * FROM student WHERE name = &amp;#39;Jack&amp;#39;; SELECT * FROM student WHERE student_id &amp;gt; 2; SELECT * FROM student WHERE major = &amp;#39;Biology&amp;#39; AND student_id &amp;gt; 1; </description>
    </item>
    
    <item>
      <title>Company Database Intro</title>
      <link>https://www.mikedane.com/databases/sql/company-database-intro/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:56 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/company-database-intro/</guid>
      <description>Click Here to Download PDF </description>
    </item>
    
    <item>
      <title>Creating Company Database</title>
      <link>https://www.mikedane.com/databases/sql/creating-company-database/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:56 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/creating-company-database/</guid>
      <description>Code CopyCREATE TABLE employee ( emp_id INT PRIMARY KEY, first_name VARCHAR(40), last_name VARCHAR(40), birth_day DATE, sex VARCHAR(1), salary INT, super_id INT, branch_id INT ); CREATE TABLE branch ( branch_id INT PRIMARY KEY, branch_name VARCHAR(40), mgr_id INT, mgr_start_date DATE, FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL ); ALTER TABLE employee ADD FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL; ALTER TABLE employee ADD FOREIGN KEY(super_id) REFERENCES employee(emp_id) ON DELETE SET NULL; CREATE TABLE client ( client_id INT PRIMARY KEY, client_name VARCHAR(40), branch_id INT, FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL ); CREATE TABLE works_with ( emp_id INT, client_id INT, total_sales INT, PRIMARY KEY(emp_id, client_id), FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE, FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE ); CREATE TABLE branch_supplier ( branch_id INT, supplier_name VARCHAR(40), supply_type VARCHAR(40), PRIMARY KEY(branch_id, supplier_name), FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE ); -- ----------------------------------------------------------------------------- -- Corporate INSERT INTO employee VALUES(100, &amp;#39;David&amp;#39;, &amp;#39;Wallace&amp;#39;, &amp;#39;1967-11-17&amp;#39;, &amp;#39;M&amp;#39;, 250000, NULL, NULL); INSERT INTO branch VALUES(1, &amp;#39;Corporate&amp;#39;, 100, &amp;#39;2006-02-09&amp;#39;); UPDATE employee SET branch_id = 1 WHERE emp_id = 100; INSERT INTO employee VALUES(101, &amp;#39;Jan&amp;#39;, &amp;#39;Levinson&amp;#39;, &amp;#39;1961-05-11&amp;#39;, &amp;#39;F&amp;#39;, 110000, 100, 1); -- Scranton INSERT INTO employee VALUES(102, &amp;#39;Michael&amp;#39;, &amp;#39;Scott&amp;#39;, &amp;#39;1964-03-15&amp;#39;, &amp;#39;M&amp;#39;, 75000, 100, NULL); INSERT INTO branch VALUES(2, &amp;#39;Scranton&amp;#39;, 102, &amp;#39;1992-04-06&amp;#39;); UPDATE employee SET branch_id = 2 WHERE emp_id = 102; INSERT INTO employee VALUES(103, &amp;#39;Angela&amp;#39;, &amp;#39;Martin&amp;#39;, &amp;#39;1971-06-25&amp;#39;, &amp;#39;F&amp;#39;, 63000, 102, 2); INSERT INTO employee VALUES(104, &amp;#39;Kelly&amp;#39;, &amp;#39;Kapoor&amp;#39;, &amp;#39;1980-02-05&amp;#39;, &amp;#39;F&amp;#39;, 55000, 102, 2); INSERT INTO employee VALUES(105, &amp;#39;Stanley&amp;#39;, &amp;#39;Hudson&amp;#39;, &amp;#39;1958-02-19&amp;#39;, &amp;#39;M&amp;#39;, 69000, 102, 2); -- Stamford INSERT INTO employee VALUES(106, &amp;#39;Josh&amp;#39;, &amp;#39;Porter&amp;#39;, &amp;#39;1969-09-05&amp;#39;, &amp;#39;M&amp;#39;, 78000, 100, NULL); INSERT INTO branch VALUES(3, &amp;#39;Stamford&amp;#39;, 106, &amp;#39;1998-02-13&amp;#39;); UPDATE employee SET branch_id = 3 WHERE emp_id = 106; INSERT INTO employee VALUES(107, &amp;#39;Andy&amp;#39;, &amp;#39;Bernard&amp;#39;, &amp;#39;1973-07-22&amp;#39;, &amp;#39;M&amp;#39;, 65000, 106, 3); INSERT INTO employee VALUES(108, &amp;#39;Jim&amp;#39;, &amp;#39;Halpert&amp;#39;, &amp;#39;1978-10-01&amp;#39;, &amp;#39;M&amp;#39;, 71000, 106, 3); -- BRANCH SUPPLIER INSERT INTO branch_supplier VALUES(2, &amp;#39;Hammer Mill&amp;#39;, &amp;#39;Paper&amp;#39;); INSERT INTO branch_supplier VALUES(2, &amp;#39;Uni-ball&amp;#39;, &amp;#39;Writing Utensils&amp;#39;); INSERT INTO branch_supplier VALUES(3, &amp;#39;Patriot Paper&amp;#39;, &amp;#39;Paper&amp;#39;); INSERT INTO branch_supplier VALUES(2, &amp;#39;J.</description>
    </item>
    
    <item>
      <title>More Basic Queries</title>
      <link>https://www.mikedane.com/databases/sql/more-basic-queries/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:56 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/more-basic-queries/</guid>
      <description>Code Copy-- Find all employees SELECT * FROM employee; -- Find all clients SELECT * FROM clients; -- Find all employees ordered by salary SELECT * from employee ORDER BY salary ASC/DESC; -- Find all employees ordered by sex then name SELECT * from employee ORDER BY sex, name; -- Find the first 5 employees in the table SELECT * from employee LIMIT 5; -- Find the first and last names of all employees SELECT first_name, employee.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://www.mikedane.com/databases/sql/functions/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:56 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/functions/</guid>
      <description>Code Copy-- Find the number of employees SELECT COUNT(super_id) FROM employee; -- Find the average of all employee&amp;#39;s salaries SELECT AVG(salary) FROM employee; -- Find the sum of all employee&amp;#39;s salaries SELECT SUM(salary) FROM employee; -- Find out how many males and females there are SELECT COUNT(sex), sex FROM employee GROUP BY sex -- Find the total sales of each salesman SELECT SUM(total_sales), emp_id FROM works_with GROUP BY client_id; -- Find the total amount of money spent by each client SELECT SUM(total_sales), client_id FROM works_with GROUP BY client_id; </description>
    </item>
    
    <item>
      <title>Wildcards</title>
      <link>https://www.mikedane.com/databases/sql/wildcards/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:56 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/wildcards/</guid>
      <description>Code Copy-- % = any # characters, _ = one character -- Find any client&amp;#39;s who are an LLC SELECT * FROM client WHERE client_name LIKE &amp;#39;%LLC&amp;#39;; -- Find any branch suppliers who are in the label business SELECT * FROM branch_supplier WHERE supplier_name LIKE &amp;#39;% Label%&amp;#39;; -- Find any employee born on the 10th day of the month SELECT * FROM employee WHERE birth_day LIKE &amp;#39;_____10%&amp;#39;; -- Find any clients who are schools SELECT * FROM client WHERE client_name LIKE &amp;#39;%Highschool%&amp;#39;; </description>
    </item>
    
    <item>
      <title>Union</title>
      <link>https://www.mikedane.com/databases/sql/union/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:56 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/union/</guid>
      <description>Code Copy-- Find a list of employee and branch names SELECT employee.first_name AS Employee_Branch_Names FROM employee UNION SELECT branch.branch_name FROM branch; -- Find a list of all clients &amp;amp; branch suppliers&amp;#39; names SELECT client.client_name AS Non-Employee_Entities, client.branch_id AS Branch_ID FROM client UNION SELECT branch_supplier.supplier_name, branch_supplier.branch_id FROM branch_supplier; </description>
    </item>
    
    <item>
      <title>Joins</title>
      <link>https://www.mikedane.com/databases/sql/joins/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:56 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/joins/</guid>
      <description>Code Copy-- Add the extra branch INSERT INTO branch VALUES(4, &amp;#34;Buffalo&amp;#34;, NULL, NULL); SELECT employee.emp_id, employee.first_name, branch.branch_name FROM employee JOIN branch -- LEFT JOIN, RIGHT JOIN ON employee.emp_id = branch.mgr_id; </description>
    </item>
    
    <item>
      <title>Nested Queries</title>
      <link>https://www.mikedane.com/databases/sql/nested-queries/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:56 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/nested-queries/</guid>
      <description>Code Copy-- Find names of all employees who have sold over 50,000 SELECT employee.first_name, employee.last_name FROM employee WHERE employee.emp_id IN (SELECT works_with.emp_id FROM works_with WHERE works_with.total_sales &amp;gt; 50000); -- Find all clients who are handles by the branch that Michael Scott manages -- Assume you know Michael&amp;#39;s ID SELECT client.client_id, client.client_name FROM client WHERE client.branch_id = (SELECT branch.branch_id FROM branch WHERE branch.mgr_id = 102); -- Find all clients who are handles by the branch that Michael Scott manages -- Assume you DONT&amp;#39;T know Michael&amp;#39;s ID SELECT client.</description>
    </item>
    
    <item>
      <title>On Delete</title>
      <link>https://www.mikedane.com/databases/sql/on-delete/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:56 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/on-delete/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Triggers</title>
      <link>https://www.mikedane.com/databases/sql/triggers/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:57 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/triggers/</guid>
      <description>Code Copy-- CREATE -- TRIGGER `event_name` BEFORE/AFTER INSERT/UPDATE/DELETE -- ON `database`.`table` -- FOR EACH ROW BEGIN -- -- trigger body -- -- this code is applied to every -- -- inserted/updated/deleted row -- END; CREATE TABLE trigger_test ( message VARCHAR(100) ); DELIMITER $$ CREATE TRIGGER my_trigger BEFORE INSERT ON employee FOR EACH ROW BEGIN INSERT INTO trigger_test VALUES(&amp;#39;added new employee&amp;#39;); END$$ DELIMITER ; INSERT INTO employee VALUES(109, &amp;#39;Oscar&amp;#39;, &amp;#39;Martinez&amp;#39;, &amp;#39;1968-02-19&amp;#39;, &amp;#39;M&amp;#39;, 69000, 106, 3); DELIMITER $$ CREATE TRIGGER my_trigger BEFORE INSERT ON employee FOR EACH ROW BEGIN INSERT INTO trigger_test VALUES(NEW.</description>
    </item>
    
    <item>
      <title>Er Diagrams Intro</title>
      <link>https://www.mikedane.com/databases/sql/er-diagrams-intro/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:57 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/er-diagrams-intro/</guid>
      <description>ER Diagram Template Student Diagram </description>
    </item>
    
    <item>
      <title>Designing An Er Diagram</title>
      <link>https://www.mikedane.com/databases/sql/designing-an-er-diagram/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:57 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/designing-an-er-diagram/</guid>
      <description>Company Data Storage Requirements The company is organized into branches. Each branch has a unique number, a name, and a particular employee who manages it.
The company makes it&amp;rsquo;s money by selling to clients. Each client has a name and a unique number to identify it.
The foundation of the company is it&amp;rsquo;s employees. Each employee has a name, birthday, sex, salary and a unique number.
An employee can work for one branch at a time, and each branch will be managed by one of the employees that work there.</description>
    </item>
    
    <item>
      <title>Er Diagram Mapping</title>
      <link>https://www.mikedane.com/databases/sql/er-diagram-mapping/</link>
      <pubDate>Fri, 22 Dec 2017 11:48:57 -0500</pubDate>
      
      <guid>https://www.mikedane.com/databases/sql/er-diagram-mapping/</guid>
      <description>Company Database Schema </description>
    </item>
    
  </channel>
</rss>
