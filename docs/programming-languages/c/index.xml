<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Mike Dane</title>
    <link>https://www.mikedane.com/programming-languages/c/</link>
    <description>Recent content in C on Mike Dane</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Nov 2017 00:17:31 -0400</lastBuildDate><atom:link href="https://www.mikedane.com/programming-languages/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Windows Installation</title>
      <link>https://www.mikedane.com/programming-languages/c/windows-installation/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:32 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/windows-installation/</guid>
      <description>Code Copy </description>
    </item>
    
    <item>
      <title>Mac Installation</title>
      <link>https://www.mikedane.com/programming-languages/c/mac-installation/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:32 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/mac-installation/</guid>
      <description>Code Copy </description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://www.mikedane.com/programming-languages/c/hello-world/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:32 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/hello-world/</guid>
      <description>Code Copyprintf(&amp;#34;Hello\n&amp;#34;); printf(&amp;#34;World&amp;#34;); printf(&amp;#34;!\n&amp;#34;); </description>
    </item>
    
    <item>
      <title>Drawing A Pyramid</title>
      <link>https://www.mikedane.com/programming-languages/c/drawing-a-pyramid/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:33 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/drawing-a-pyramid/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://www.mikedane.com/programming-languages/c/variables/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:34 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/variables/</guid>
      <description>printf(&amp;quot;There once was a man named %s&amp;quot;, characterName); printf(&amp;quot;He was %d years old&amp;quot;, characterAge); printf(&amp;quot;He really liked the name %s&amp;quot;, characterName); printf(&amp;quot;But didn&#39;t like being %d&amp;quot;, characterAge);
printf(&amp;quot;There once was a man named %s&amp;quot;, characterName); printf(&amp;quot;He was %d years old&amp;quot;, characterAge);
characterAge = 80;
printf(&amp;quot;He really liked the name %s&amp;quot;, characterName); printf(&amp;quot;But didn&#39;t like being %d&amp;quot;, characterAge);
Names are case-sensitive and may begin with: letters, _ After, may include letters, numbers, _ Convention says Start with a lowercase word, then additional words are capitalized ex.</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>https://www.mikedane.com/programming-languages/c/data-types/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:35 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/data-types/</guid>
      <description>// you can make them unsigned by adding &amp;quot;unsigned&amp;quot; prefix short age0 = 10; // atleast 16-bits signed integer int age1 = 20; // atleast 16-bits signed integer (not smaller than short) long age2 = 30; // atleast 32-bits signed integer long long age3 = 40; // atleast 64-bits signed integer
float gpa0 = 2.5; // single percision floating point double gpa1 = 3.5; // double-precision floating point long double gpa2 = 3.</description>
    </item>
    
    <item>
      <title>Printf</title>
      <link>https://www.mikedane.com/programming-languages/c/printf/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:35 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/printf/</guid>
      <description> %c	character %d	integer number (base 10) %e	exponential floating-point number %f	floating-point number %i	integer (base 10) %o	octal number (base 8) %s	a string of characters %u	unsigned decimal (integer) number %x	number in hexadecimal (base 16) %%	print a percent sign %	print a percent sign </description>
    </item>
    
    <item>
      <title>Math</title>
      <link>https://www.mikedane.com/programming-languages/c/math/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:36 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/math/</guid>
      <description>Video Code Copyprintf(&amp;#34;%d \n&amp;#34;, 2 * 3); // Basic Arithmetic: &amp;#43;, -, /, * printf(&amp;#34;%d \n&amp;#34;, 10 % 3); // Modulus Op. : returns remainder of 10/3 printf(&amp;#34;%d \n&amp;#34;, 1 &amp;#43; 2 * 3); // order of operations printf(&amp;#34;%f \n&amp;#34;, 10 / 3.0); // int&amp;#39;s and doubles int num = 10; num &amp;#43;= 100; // &amp;#43;=, -=, /=, *= printf(&amp;#34;%d \n&amp;#34;,num); num&amp;#43;&amp;#43;; printf(&amp;#34;%d \n&amp;#34;, num); printf(&amp;#34;%f \n&amp;#34;, pow(2, 3)); printf(&amp;#34;%f \n&amp;#34;, sqrt(144)); printf(&amp;#34;%f \n&amp;#34;, round(2.</description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://www.mikedane.com/programming-languages/c/comments/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:37 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/comments/</guid>
      <description>// single // line // comment</description>
    </item>
    
    <item>
      <title>Constants</title>
      <link>https://www.mikedane.com/programming-languages/c/constants/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:39 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/constants/</guid>
      <description>Code Copyconst int FAV_NUM = 4; </description>
    </item>
    
    <item>
      <title>Getting Input From Users</title>
      <link>https://www.mikedane.com/programming-languages/c/getting-input-from-users/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:39 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/getting-input-from-users/</guid>
      <description>// ints int age; printf(&amp;quot;Enter your age: &amp;quot;); scanf(&amp;quot;%d&amp;quot;, &amp;amp;age); printf(&amp;quot;You are %d \n&amp;quot;, age);
// chars char grade; printf(&amp;quot;Enter your grade: &amp;quot;); scanf(&amp;quot;%c&amp;quot;, &amp;amp;grade); printf(&amp;quot;You got an %c on the test \n&amp;quot;, grade);
// doubles double gpa; printf(&amp;quot;Enter your gpa: &amp;quot;); scanf(&amp;quot;%lf&amp;quot;, &amp;amp;gpa); printf(&amp;quot;Your gpa is %f \n&amp;quot;, gpa);</description>
    </item>
    
    <item>
      <title>Creating A Calculator</title>
      <link>https://www.mikedane.com/programming-languages/c/creating-a-calculator/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:41 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/creating-a-calculator/</guid>
      <description>Code Copydouble num1, num2; printf(&amp;#34;num1: &amp;#34;); scanf(&amp;#34;%lf&amp;#34;, &amp;amp;num1); printf(&amp;#34;num2: &amp;#34;); scanf(&amp;#34;%lf&amp;#34;, &amp;amp;num2); printf(&amp;#34;%f&amp;#34;, num1 &amp;#43; num2); </description>
    </item>
    
    <item>
      <title>Building A Mad Libs Game</title>
      <link>https://www.mikedane.com/programming-languages/c/building-a-mad-libs-game/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:41 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/building-a-mad-libs-game/</guid>
      <description>Code Copy// using fgets() instead of scanf() char color[50]; char pluralNoun[50]; char celebrity[50]; printf(&amp;#34;Enter color: &amp;#34;); fgets(color, 50, stdin); printf(&amp;#34;Enter plural noun: &amp;#34;); fgets(pluralNoun, 50, stdin); printf(&amp;#34;Enter celebrity: &amp;#34;); fgets(celebrity, 50, stdin); printf(&amp;#34;Roses are %s \n&amp;#34;, color); printf(&amp;#34;%s are blue \n&amp;#34;, pluralNoun); printf(&amp;#34;I love %s \n&amp;#34;, celebrity); </description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://www.mikedane.com/programming-languages/c/arrays/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:43 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/arrays/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://www.mikedane.com/programming-languages/c/functions/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:44 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/functions/</guid>
      <description>Code Copyint addNumbers(int num1, int num2); int main(){ int sum = addNumbers(4, 60); printf(&amp;#34;%d \n&amp;#34;, sum); return 0; } int addNumbers(int num1, int num2){ return num1 &amp;#43; num2; } </description>
    </item>
    
    <item>
      <title>Return Statements</title>
      <link>https://www.mikedane.com/programming-languages/c/return-statements/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:44 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/return-statements/</guid>
      <description>Code Copyint addNumbers(int num1, int num2); int main(){ int sum = addNumbers(4, 60); printf(&amp;#34;%d \n&amp;#34;, sum); return 0; } int addNumbers(int num1, int num2){ return num1 &amp;#43; num2; } </description>
    </item>
    
    <item>
      <title>If Statements</title>
      <link>https://www.mikedane.com/programming-languages/c/if-statements/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:44 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/if-statements/</guid>
      <description>if(isStudent != 0 &amp;amp;&amp;amp; isSmart != 0){ printf(&amp;quot;You are a student\n&amp;quot;); } else if(isStudent != 0 &amp;amp;&amp;amp; isSmart == 0){ printf(&amp;quot;You are not a smart student\n&amp;quot;); } else { printf(&amp;quot;You are not a student and not smart\n&amp;quot;); }
// &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=, !=, == if(1 &amp;gt; 3){ printf(&amp;quot;number comparison was true\n&amp;quot;); }
if(&#39;a&#39; &amp;gt; &#39;b&#39;){ printf(&amp;quot;character comparison was true\n&amp;quot;); }</description>
    </item>
    
    <item>
      <title>Building A Better Calculator</title>
      <link>https://www.mikedane.com/programming-languages/c/building-a-better-calculator/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:45 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/building-a-better-calculator/</guid>
      <description>Code Copyint num1, num2; char op; printf((&amp;#34;Enter num1: &amp;#34;); scanf(&amp;#34;%d&amp;#34;, &amp;amp;num1); printf((&amp;#34;Enter Operator: &amp;#34;); scanf(&amp;#34;%c&amp;#34;, &amp;amp;op); printf((&amp;#34;Enter num2: &amp;#34;); scanf(&amp;#34;%d&amp;#34;, &amp;amp;num2); if(op == &amp;#39;&amp;#43;&amp;#39;){ printf(&amp;#34;%d&amp;#34;, num1 &amp;#43; num2); } else if(op == &amp;#39;-&amp;#39;){ printf(&amp;#34;%d&amp;#34;, num1 - num2); } else if(op == &amp;#39;/&amp;#39;){ printf(&amp;#34;%d&amp;#34;, num1 / num2); } else if(op == &amp;#39;*&amp;#39;){ printf(&amp;#34;%d&amp;#34;, num1 * num2); } else { printf(&amp;#34;Invalid Operator&amp;#34;); } </description>
    </item>
    
    <item>
      <title>Switch Statements</title>
      <link>https://www.mikedane.com/programming-languages/c/switch-statements/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:46 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/switch-statements/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Structs</title>
      <link>https://www.mikedane.com/programming-languages/c/structs/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:46 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/structs/</guid>
      <description>Code Copystruct Book{ char title[100]; char author[100]; } int main(){ struct Book book1; book1.numPages = 600; strcpy( book1.title, &amp;#34;Harry Potter&amp;#34; ); strcpy( book1.author, &amp;#34;JK Rowling&amp;#34;); printf(&amp;#34;%s \n&amp;#34;, book1.title); return 0; } </description>
    </item>
    
    <item>
      <title>While Loops</title>
      <link>https://www.mikedane.com/programming-languages/c/while-loops/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:47 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/while-loops/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Building A Guessing Game</title>
      <link>https://www.mikedane.com/programming-languages/c/building-a-guessing-game/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:48 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/building-a-guessing-game/</guid>
      <description>Code Copyint secretNum = 7; int guess; int guessCount = 0; int guessLimit = 3; int outOfGuesses = 0; while(guess != secretNum &amp;amp;&amp;amp; outOfGuesses == 0){ if(guessCount &amp;lt; guessLimit){ printf(&amp;#34;Enter a guess: &amp;#34;; scanf(&amp;#34;d&amp;#34;, &amp;amp;guess); guessCount&amp;#43;&amp;#43;; } else { outOfGuesses = 1; } } if(outOfGuesses != 0){ printf(&amp;#34;You Lose!&amp;#34;); } else { printf(&amp;#34;You Win!&amp;#34;); } </description>
    </item>
    
    <item>
      <title>For Loops</title>
      <link>https://www.mikedane.com/programming-languages/c/for-loops/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:49 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/for-loops/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>2d Arrays &amp; Nested Loops</title>
      <link>https://www.mikedane.com/programming-languages/c/2d-arrays-nested-loops/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:49 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/2d-arrays-nested-loops/</guid>
      <description>Code Copy// int numberGrid[2][3]; int numberGrid[2][3] = { {1, 2, 3}, {4, 5, 6} }; numberGrid[0][1] = 99; cout &amp;lt;&amp;lt; numberGrid[0][0] &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; numberGrid[0][1] &amp;lt;&amp;lt; endl; for(int i = 0; i &amp;lt; 2; i&amp;#43;&amp;#43;){ for(int j = 0; j &amp;lt; 3; j&amp;#43;&amp;#43;){ printf(&amp;#34;%d&amp;#34;, numberGrid[i][j]); } } </description>
    </item>
    
    <item>
      <title>Accessing Memory Address</title>
      <link>https://www.mikedane.com/programming-languages/c/accessing-memory-address/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:51 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/accessing-memory-address/</guid>
      <description>Code Copyint num = 10; printf(&amp;#34;%p \n&amp;#34;, &amp;amp;num); </description>
    </item>
    
    <item>
      <title>Pointers</title>
      <link>https://www.mikedane.com/programming-languages/c/pointers/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:52 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/pointers/</guid>
      <description>Code Copyint num = 10; printf(&amp;#34;%p \n&amp;#34;, &amp;amp;num); int *pNum = &amp;amp;num; printf(&amp;#34;%p \n&amp;#34;, pNum); </description>
    </item>
    
    <item>
      <title>Dereferencing Pointers</title>
      <link>https://www.mikedane.com/programming-languages/c/dereferencing-pointers/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:52 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/dereferencing-pointers/</guid>
      <description>Code Copyint num = 10; printf(&amp;#34;%p \n&amp;#34;, &amp;amp;num); int *pNum = &amp;amp;num; printf(&amp;#34;%p \n&amp;#34;, pNum); printf(&amp;#34;%d \n&amp;#34;, *pNum); </description>
    </item>
    
    <item>
      <title>Writing To External Files</title>
      <link>https://www.mikedane.com/programming-languages/c/writing-to-external-files/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:52 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/writing-to-external-files/</guid>
      <description>Code CopyFILE * fpointer = fopen(&amp;#34;employees.txt&amp;#34;, &amp;#34;w&amp;#34;); // also try &amp;#34;a&amp;#34; for append fprint(fpointer, &amp;#34;employee&amp;#34;); fclose(fpointer); </description>
    </item>
    
    <item>
      <title>Reading From External Files</title>
      <link>https://www.mikedane.com/programming-languages/c/reading-from-external-files/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:54 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/reading-from-external-files/</guid>
      <description>Code Copychar line[255]; FILE * fpointer = fopen(&amp;#34;employees.txt&amp;#34;, &amp;#34;r&amp;#34;); fgets(line, 255, fpointer); printf(&amp;#34;%s&amp;#34;, line); fclose(fpointer); </description>
    </item>
    
    <item>
      <title>In One Video</title>
      <link>https://www.mikedane.com/programming-languages/c/in-one-video/</link>
      <pubDate>Wed, 01 Nov 2017 00:17:37 -0400</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/c/in-one-video/</guid>
      <description>C Overview C is a general purpose, staticly typed, imperative programming language that was founded in 1972 by Dennis Ritchie and Ken Thompson at Bell Labrotories.
C is a low level language meaning it provides constructs which map efficiently to typical machine instructions. Baiscally it&amp;rsquo;s a more user friendly way to write low level programs. Instead of pulling your hair out writing low level code in an assembly language, you can abstract a lot of the fuss and write equivalent programs in c</description>
    </item>
    
  </channel>
</rss>
