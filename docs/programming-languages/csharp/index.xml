<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on Mike Dane</title>
    <link>https://www.mikedane.com/programming-languages/csharp/</link>
    <description>Recent content in C# on Mike Dane</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Nov 2017 18:34:44 -0500</lastBuildDate><atom:link href="https://www.mikedane.com/programming-languages/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installation</title>
      <link>https://www.mikedane.com/programming-languages/csharp/installation/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:44 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/installation/</guid>
      <description>Code Copy </description>
    </item>
    
    <item>
      <title>Drawing A Pyramid</title>
      <link>https://www.mikedane.com/programming-languages/csharp/drawing-a-pyramid/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:44 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/drawing-a-pyramid/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://www.mikedane.com/programming-languages/csharp/variables/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:44 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/variables/</guid>
      <description>Console.WriteLine(&amp;quot;There once was a man named &amp;quot; + characterName); Console.WriteLine(&amp;quot;He was &amp;quot; + characterAge + &amp;quot; years old&amp;quot;); Console.WriteLine(&amp;quot;He really liked the name &amp;quot; + characterName); Console.WriteLine(&amp;quot;But didn&#39;t like being &amp;quot; + characterAge);
Console.WriteLine(&amp;quot;There once was a man named &amp;quot; + characterName); Console.WriteLine(&amp;quot;He was &amp;quot; + characterAge + &amp;quot; years old&amp;quot;);
characterAge = 80;
Console.WriteLine(&amp;quot;He really liked the name &amp;quot; + characterName); Console.WriteLine(&amp;quot;But didn&#39;t like being &amp;quot; + characterAge);</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>https://www.mikedane.com/programming-languages/csharp/data-types/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:44 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/data-types/</guid>
      <description>// short, int, long can be pre-pended with &#39;u&#39; for &#39;unsigned&#39; byte age0 = 0; // 8-bit unsigned integer short age1 = 10; // 16-bit signed integer. int age2 = 20; // 32-bit signed integer long age3 = 30L; // 64-bit signed integer
float gpa0 = 2.5F; // 32-bit floating point double gpa1 = 3.5; // 64-bit double-precision floating point decimal gpa2 = 4.5M; // 128-bit precise decimal
bool isTall; // 1 bit -&amp;gt; true/false isTall = true;</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://www.mikedane.com/programming-languages/csharp/strings/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:44 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/strings/</guid>
      <description> Video Code Copystring greeting = &amp;#34;Hello&amp;#34;; // indexes: 01234 Console.WriteLine( greeting.Length ); Console.WriteLine( greeting[0] ); Console.WriteLine( greeting.IndexOf(&amp;#34;llo&amp;#34;) ); Console.WriteLine( greeting.IndexOf(&amp;#34;z&amp;#34;) ); Console.WriteLine( greeting.Substring(2) ); Console.WriteLine( greeting.Substring(1, 3) ); </description>
    </item>
    
    <item>
      <title>Math</title>
      <link>https://www.mikedane.com/programming-languages/csharp/math/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:44 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/math/</guid>
      <description> Video Code CopyConsole.WriteLine(2 * 3); // Basic Arithmetic: &amp;#43;, -, /, * Console.WriteLine(10 % 3); // Modulus Op. : returns remainder of 10/3 Console.WriteLine(1 &amp;#43; 2 * 3); // order of operations Console.WriteLine(10 / 3.0); // int&amp;#39;s and doubles int num = 10; num &amp;#43;= 100; // &amp;#43;=, -=, /=, *= Console.WriteLine(num); num&amp;#43;&amp;#43;; Console.WriteLine(num); Console.WriteLine( Math.Pow(2, 3) ); Console.WriteLine( Math.Sqrt(144) ); Console.WriteLine( Math.Round(2.7) ); </description>
    </item>
    
    <item>
      <title>Getting Input From Users</title>
      <link>https://www.mikedane.com/programming-languages/csharp/getting-input-from-users/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/getting-input-from-users/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Creating A Calculator</title>
      <link>https://www.mikedane.com/programming-languages/csharp/creating-a-calculator/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/creating-a-calculator/</guid>
      <description>Code CopyConsole.Write(&amp;#34;Enter num1: &amp;#34;); double num1 = Convert.ToDouble(Console.ReadLine()); Console.Write(&amp;#34;Enter num2: &amp;#34;); double num2 = Convert.ToDouble(Console.ReadLine()); Console.WriteLine(num1 &amp;#43; num2); </description>
    </item>
    
    <item>
      <title>Building A Mad Libs Game</title>
      <link>https://www.mikedane.com/programming-languages/csharp/building-a-mad-libs-game/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/building-a-mad-libs-game/</guid>
      <description>Code CopyConsole.Write(&amp;#34;Enter color: &amp;#34;); string color = Console.ReadLine(); Console.Write(&amp;#34;Enter plural noun: &amp;#34;); string pluralNoun = Console.ReadLine(); Console.Write(&amp;#34;Enter celebrity: &amp;#34;); string celebrity = Console.ReadLine(); Console.WriteLine($&amp;#34;Roses are {color}&amp;#34;); Console.WriteLine($&amp;#34;{pluralNoun} are blue&amp;#34;); Console.WriteLine($&amp;#34;I love {celebrity}&amp;#34;); </description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://www.mikedane.com/programming-languages/csharp/arrays/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/arrays/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Methods</title>
      <link>https://www.mikedane.com/programming-languages/csharp/methods/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/methods/</guid>
      <description>public static void sayHi(){ Console.WriteLine(&amp;quot;Hello&amp;quot;); }
A parameter is a special variable that a Method will use to perform it&amp;rsquo;s task in a way that is more specific to the needs of the caller. An argument is the value the caller gives to the Method which will get stored inside the parameter variable.
public static void sayHi(){ Console.WriteLine(&amp;quot;Hello &amp;quot; + name + &amp;quot; you are &amp;quot; + age); }</description>
    </item>
    
    <item>
      <title>Return</title>
      <link>https://www.mikedane.com/programming-languages/csharp/return/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/return/</guid>
      <description>Code Copypublic static void Main(string [] args){ int sum = AddNumbers(4, 60); Console.WriteLine(sum); } public static int AddNumbers(int num1, int num2){ return num1 &amp;#43; num2; } </description>
    </item>
    
    <item>
      <title>If Statements</title>
      <link>https://www.mikedane.com/programming-languages/csharp/if-statements/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/if-statements/</guid>
      <description>if (isStudent &amp;amp;&amp;amp; isSmart) { Console.WriteLine(&amp;quot;You are a student&amp;quot;); } else if (isStudent &amp;amp;&amp;amp; !isSmart) { Console.WriteLine(&amp;quot;You are not a smart student&amp;quot;); } else { Console.WriteLine(&amp;quot;You are not a student and not smart&amp;quot;); }
// &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=, !=, == if (1 &amp;lt; 3) { Console.WriteLine(&amp;quot;number comparison was true&amp;quot;); }</description>
    </item>
    
    <item>
      <title>If Statements Cont</title>
      <link>https://www.mikedane.com/programming-languages/csharp/if-statements-cont/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/if-statements-cont/</guid>
      <description>Code Copybool isStudent = false; bool isSmart = false; if (isStudent &amp;amp;&amp;amp; isSmart) { Console.WriteLine(&amp;#34;You are a student&amp;#34;); } else if (isStudent &amp;amp;&amp;amp; !isSmart) { Console.WriteLine(&amp;#34;You are not a smart student&amp;#34;); } else { Console.WriteLine(&amp;#34;You are not a student and not smart&amp;#34;); } // &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=, !=, == if (1 &amp;lt; 3) { Console.WriteLine(&amp;#34;number comparison was true&amp;#34;); } </description>
    </item>
    
    <item>
      <title>4 Function Calculator</title>
      <link>https://www.mikedane.com/programming-languages/csharp/calculator/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:46 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/calculator/</guid>
      <description>Code CopyConsole.Write(&amp;#34;Enter num1: &amp;#34;); double num1 = Convert.ToDouble(Console.ReadLine()); Console.Write(&amp;#34;Enter operator: &amp;#34;); string op = Console.ReadLine(); Console.Write(&amp;#34;Enter num2: &amp;#34;); double num2 = Convert.ToDouble(Console.ReadLine()); if (op == &amp;#34;&amp;#43;&amp;#34;){ Console.WriteLine(num1 &amp;#43; num2); } else if (op == &amp;#34;-&amp;#34;){ Console.WriteLine(num1 - num2); } else if (op == &amp;#34;/&amp;#34;){ Console.WriteLine(num1 / num2); } else if (op == &amp;#34;*&amp;#34;){ Console.WriteLine(num1 * num2); } else { Console.WriteLine(&amp;#34;Invalid Operator&amp;#34;); } </description>
    </item>
    
    <item>
      <title>Switch Statements</title>
      <link>https://www.mikedane.com/programming-languages/csharp/switch-statements/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:46 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/switch-statements/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>While Loops</title>
      <link>https://www.mikedane.com/programming-languages/csharp/while-loops/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:46 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/while-loops/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Building A Guessing Game</title>
      <link>https://www.mikedane.com/programming-languages/csharp/building-a-guessing-game/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:46 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/building-a-guessing-game/</guid>
      <description>Code Copystring secretWord = &amp;#34;giraffe&amp;#34;; string guess = &amp;#34;&amp;#34;; int guessCount = 0; int guessLimit = 3; bool outOfGuesses = false; while(!guess == secretWord &amp;amp;&amp;amp; !outOfGuesses){ if(guessCount &amp;lt; guessLimit){ Console.Write(&amp;#34;Enter a guess: &amp;#34;); guess = Console.ReadLine(); guessCount&amp;#43;&amp;#43;; } else { outOfGuesses = true; } } if(outOfGuesses){ Console.WriteLine(&amp;#34;You Lose!&amp;#34;); } else { Console.WriteLine(&amp;#34;You Win!&amp;#34;); } </description>
    </item>
    
    <item>
      <title>For Loops</title>
      <link>https://www.mikedane.com/programming-languages/csharp/for-loops/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:46 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/for-loops/</guid>
      <description> Video Code Copyfor(int i = 0; i &amp;lt; 5; i&amp;#43;&amp;#43;){ Console.WriteLine(i); } int[] luckyNums = {4, 8, 15, 16, 23, 42}; foreach(int luckyNum in luckyNums){ Console.WriteLine(luckyNum); } </description>
    </item>
    
    <item>
      <title>Building An Exponent Method</title>
      <link>https://www.mikedane.com/programming-languages/csharp/building-an-exponent-function/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:46 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/building-an-exponent-function/</guid>
      <description>Code Copystatic int GetPow(int baseNum, int powNum) { int result = 1; for(int i = 0; i &amp;lt; powNum; i&amp;#43;&amp;#43;){ result = result * baseNum; } return result; } </description>
    </item>
    
    <item>
      <title>2d Arrays</title>
      <link>https://www.mikedane.com/programming-languages/csharp/2d-arrays/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:46 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/2d-arrays/</guid>
      <description>Code Copy// int [][] numberGrid = new int[2][3]; int[][] numberGrid = { new int[]{ 1, 2 }, new int[]{ 3, 4 } }; numberGrid[0][1] = 99; Console.WriteLine(numberGrid[0][0]); Console.WriteLine(numberGrid[0][1]); for(int i = 0; i &amp;lt; numberGrid.Length; i&amp;#43;&amp;#43;){ for(int j = 0; j &amp;lt; numberGrid[i].Length; j&amp;#43;&amp;#43;){ Console.WriteLine(numberGrid[i][j]); } } </description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>https://www.mikedane.com/programming-languages/csharp/comments/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:47 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/comments/</guid>
      <description>// single // line // comment</description>
    </item>
    
    <item>
      <title>Try &amp; Catch</title>
      <link>https://www.mikedane.com/programming-languages/csharp/try-catch/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:47 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/try-catch/</guid>
      <description>Code Copy// this code takes a number from the user and // divides 10 by it. Enter &amp;#39;0&amp;#39; to trigger the exception try{ int division = 10 / Convert.ToInt32(Console.ReadLine()); }catch(DivideByZeroException e){ Console.WriteLine(e); }catch(Exception e){ Console.WriteLine(e); // Not best practice to use general Exception } // throws new exception throw new DivideByZeroException(&amp;#34;can&amp;#39;t divide numbers&amp;#34;); </description>
    </item>
    
    <item>
      <title>Classes &amp; Objects</title>
      <link>https://www.mikedane.com/programming-languages/csharp/classes-objects/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:47 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/classes-objects/</guid>
      <description>public class App { public static void Main(string[] args) { Book book1 = new Book(); book1.title = &amp;quot;Harry Potter&amp;quot;; book1.author = &amp;quot;JK Rowling&amp;quot;; book1.numPages = 400;
Console.WriteLine(book1.title); Book book2 = new Book(); book2.title = &amp;amp;#34;Lord of the Rings&amp;amp;#34;; book2.author = &amp;amp;#34;JRR Tolkien&amp;amp;#34;; book2.numPages = 300; Console.WriteLine(book2.title); } }</description>
    </item>
    
    <item>
      <title>Constructor Function</title>
      <link>https://www.mikedane.com/programming-languages/csharp/constructor-function/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:47 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/constructor-function/</guid>
      <description>Code Copypublic class Book{ public String title; public String author; public Book(String title, String author){ this.title = title; this.author = author; } } public class App { public static void Main(string[] args) { Book book1 = new Book(&amp;#34;Harry Potter&amp;#34;, &amp;#34;JK Rowling&amp;#34;); Console.WriteLine(book1.title); Book book2 = new Book(&amp;#34;Lord of the Rings&amp;#34;, &amp;#34;JRR Tolkien&amp;#34;); Console.WriteLine(book2.title); } } </description>
    </item>
    
    <item>
      <title>Class Methods</title>
      <link>https://www.mikedane.com/programming-languages/csharp/class-methods/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:48 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/class-methods/</guid>
      <description>Code Copypublic class Book{ public string title; public string author; public void ReadBook(){ Console.WriteLine($&amp;#34;Reading {this.title} by {this.author}&amp;#34;); } } </description>
    </item>
    
    <item>
      <title>Getters And Setters</title>
      <link>https://www.mikedane.com/programming-languages/csharp/getters-and-setters/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:48 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/getters-and-setters/</guid>
      <description>Code Copypublic class Movie{ private String title; private String rating; public Movie(String title, String rating){ this.title = title; this.setRating(rating); } public String getRating(){ return this.rating; } public void setRating(String rating){ if (rating == &amp;#34;G&amp;#34; || rating == &amp;#34;PG&amp;#34; || rating == &amp;#34;PG-13&amp;#34; || rating == &amp;#34;R&amp;#34; || rating == &amp;#34;NR&amp;#34;){ this.rating = rating; } else { this.rating = &amp;#34;NR&amp;#34;; } } } </description>
    </item>
    
    <item>
      <title>Static Class Attributes</title>
      <link>https://www.mikedane.com/programming-languages/csharp/static-class-attributes/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:48 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/static-class-attributes/</guid>
      <description>Code Copypublic class Song{ public string title; public string artist; public static int songCount = 0; public Song(string title, string artist){ this.title = title; this.artist = artist; songCount&amp;#43;&amp;#43;; } } public class App { public static void Main(string[] args) { Song song1 = new Song(&amp;#34;Holiday&amp;#34;, &amp;#34;Green Day&amp;#34;); Console.WriteLine(Song.songCount) } } </description>
    </item>
    
    <item>
      <title>Static Methods In Classes</title>
      <link>https://www.mikedane.com/programming-languages/csharp/static-methods-in-classes/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:48 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/static-methods-in-classes/</guid>
      <description>Code Copystatic class MyStaticClass{ public static int usefulAttribute = 99; public static void usefulFunction(){ // do something useful } } </description>
    </item>
    
    <item>
      <title>Inheritance</title>
      <link>https://www.mikedane.com/programming-languages/csharp/inheritance/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:48 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/inheritance/</guid>
      <description>Code Copypublic class Chef { public void MakeChicken() { Console.WriteLine(&amp;#34;The chef makes chicken&amp;#34;); } public void MakeSalad() { Console.WriteLine(&amp;#34;The chef makes salad&amp;#34;); } public virtual void MakeSpecialDish() { Console.WriteLine(&amp;#34;The chef makes a special dish&amp;#34;); } } public class ItalianChef : Chef { public void MakePasta() { Console.WriteLine(&amp;#34;The Chef make&amp;#39;s past&amp;#34;); } public override void MakeSpecialDish() { Console.WriteLine(&amp;#34;The chef makes chicken parm&amp;#34;); } } public class App { public static void Main(string[] args) { Chef myChef = new Chef(); myChef.</description>
    </item>
    
    <item>
      <title>In One Video</title>
      <link>https://www.mikedane.com/programming-languages/csharp/in-one-video/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/in-one-video/</guid>
      <description>C# Overview C# (C Sharp) is a general purpose, staticly typed, object oriented programming language that was founded in 2000 by Microsoft as part of their .NET Initiative.
C# was designed to be portable and fast and is tightly coupled with Microsoft&amp;rsquo;s .Net Framework. It was created along side the .Net framework in the late 90s.
C# is one of the most popular programming languages in the world, and can be used to write applications on almost every platform including, Windows, Mac, iOS, Android, and Linux.</description>
    </item>
    
    <item>
      <title>Xamarin Forms</title>
      <link>https://www.mikedane.com/programming-languages/csharp/xamarin-forms-tutorial/</link>
      <pubDate>Wed, 08 Nov 2017 18:34:45 -0500</pubDate>
      
      <guid>https://www.mikedane.com/programming-languages/csharp/xamarin-forms-tutorial/</guid>
      <description>XAML Intro &amp;lt;Button Text=&amp;#34;Click Me&amp;#34; Clicked=&amp;#34;HandleButtonClick&amp;#34;/&amp;gt; public void HandleButtonClick(object sender, EventArgs args) { Console.WriteLine(&amp;#34;You Clicked Me!&amp;#34;); } Building a text entry &amp;lt;StackLayout&amp;gt; &amp;lt;Entry x:Name=&amp;#34;TodoInput&amp;#34; Text=&amp;#34;&amp;#34; TextChanged=&amp;#34;HandleTextChanged&amp;#34; Completed=&amp;#34;HandleTextCompleted&amp;#34; /&amp;gt; &amp;lt;StackLayout x:Name=&amp;#34;TodoList&amp;#34;&amp;gt; &amp;lt;/StackLayout&amp;gt; &amp;lt;/StackLayout&amp;gt; public void HandleTextChanged(object sender, TextChangedEventArgs args) { Console.WriteLine(args.NewTextValue); } public void HandleTextCompleted(object sender, EventArgs args) { Label newTodo = new Label(); newTodo.Text = TodoInput.Text; TodoList.Children.Add(newTodo); TodoInput.Text = &amp;#34;&amp;#34;; } MVVM Intro Model is what defines what the actual data we&amp;rsquo;re working with looks like View is the XAML ViewModel connect these two things together Building the TodoItem Model using System; namespace AppPractice { public class TodoItem { public string TodoText { get; set; } public bool Complete { get; set; } public TodoItem(string TodoText, bool Complete) { this.</description>
    </item>
    
  </channel>
</rss>
